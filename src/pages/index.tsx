import { GraphQLClient, gql } from "graphql-request";
import type { GetStaticProps, InferGetStaticPropsType, NextPage } from "next";
import Head from "next/head";
import { Octokit } from "octokit";
import { getProjects } from "../../graphql/getProjects";
import { CanvasContainer } from "../components/canvas/CanvasContainer";
import { TheHomePage } from "../components/homePage/TheHomePage";

const Home: NextPage = ({
    dataGithub,
    projects,
}: InferGetStaticPropsType<typeof getStaticProps>) => {
    console.log(process.env.KEYHYGRAPH);
    return (
        <div>
            <Head>
                <title>Piotr Ko≈Çodziejczyk | Portfolio</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <CanvasContainer>
                <TheHomePage dataGithub={dataGithub} />
            </CanvasContainer>
            {JSON.stringify(projects)}
        </div>
    );
};

export default Home;

export const getStaticProps: GetStaticProps = async () => {
    const octokit = new Octokit({
        auth: process.env.TOKENGITHUB,
    });

    const dataGithub = await octokit.request("GET /users/Piotrko64", {
        username: "Piotrko64",
    });
    const { followers, public_repos } = dataGithub.data;

    const key = `Bearer ${process.env.KEYHYGRAPH}`;

    const query = gql`
        query {
            projects {
                mainImage {
                    url
                }
            }
        }
    `;

    const hygraph = new GraphQLClient(process.env.HYGRAPHAPIURL!, {
        headers: {
            Authorization: key,
        },
    });

    const projects = await hygraph.request(query);

    return {
        props: {
            dataGithub: {
                followers,
                publicRepos: public_repos,
            },
        },
    };
};
